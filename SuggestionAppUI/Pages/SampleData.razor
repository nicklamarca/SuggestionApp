@page "/sampledata"
@inject ICategoryData categoryData
@inject IStatusData statusData

<h3>SampleData</h3>

@if(categoriesCreated)
{
    <h4>Categories Have Been Created</h4>
}
else
{
  <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if(statusesCreated)
{
    <h4>Statuses Have Been Created</h4>
}
else
{
  <button class="btn btn-primary" @onclick="CreateStatues">Create Statuses</button>
}






@code {
    bool categoriesCreated =false;
    bool statusesCreated = false;


    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        if(categories?.Count > 0)
        {
            return;
        }

        CategoryModel cat = new()
            {
                CategoryName = "Courses",
                CategoryDescription = "Full paid course"
            };

        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Dev Questions",
                CategoryDescription = "Advice on being a developer"
            };

        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "In Depth Tutorials",
                CategoryDescription = "A deep-dive video on how to use a topic"
            };

        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "10-Minute Training",
                CategoryDescription = "A quick \"How do I use this?\" video."
            };

        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Other",
                CategoryDescription = "Not sure what this category fits in."
            };

        await categoryData.CreateCategory(cat);


           categoriesCreated = true;
        
    }

    private async Task CreateStatues()
    {
        var statuses = await statusData.GetAllStatuses();

        if(statuses?.Count > 0)
        {
            return;
        }

        StatusModel stat = new()
            {
                StatusName = "Completed",
                StatusDescription = "Suggestion was accepted and the corresponding item was created"
            };

        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Watching",
                StatusDescription = "The suggestion is interesting. We are watching how much intrest there is."
            };

        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Upcoming",
                StatusDescription = "This suggestion was accepted and it will be released soon."
            };

        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Dismissed",
                StatusDescription = "This suggestion was not something we are going to undertake."
            };

        await statusData.CreateStatus(stat);

        statusesCreated = true;
    }
}
